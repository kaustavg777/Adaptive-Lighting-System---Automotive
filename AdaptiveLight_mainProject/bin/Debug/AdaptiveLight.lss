
bin\Debug\AdaptiveLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000662  00000716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000662  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800102  00800102  00000718  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000e0  00000000  00000000  0000071b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001e5  00000000  00000000  000007fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000067f  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003e2  00000000  00000000  0000105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000666  00000000  00000000  00001441  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000015d  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_1>
   8:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 96 02 	call	0x52c	; 0x52c <main>
  9e:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_read>:
#include"adc.h"
void adc_read(void){
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
    //ADC conversion
    SET_BIT(ADCSRA,ADSC);
  ae:	aa e7       	ldi	r26, 0x7A	; 122
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	8c 93       	st	X, r24
    while((ADSC==1));//loop for finish reading the value
    adc_result = ADCH;
  bc:	e9 e7       	ldi	r30, 0x79	; 121
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 2f       	mov	r24, r24
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 05 01 	sts	0x0105, r25
  ca:	80 93 04 01 	sts	0x0104, r24
    adc_result = adc_result << 8; //shift 8 to left
  ce:	80 91 04 01 	lds	r24, 0x0104
  d2:	90 91 05 01 	lds	r25, 0x0105
  d6:	98 2f       	mov	r25, r24
  d8:	88 27       	eor	r24, r24
  da:	90 93 05 01 	sts	0x0105, r25
  de:	80 93 04 01 	sts	0x0104, r24
    adc_result = adc_result | ADCL;
  e2:	e8 e7       	ldi	r30, 0x78	; 120
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	80 91 04 01 	lds	r24, 0x0104
  f0:	90 91 05 01 	lds	r25, 0x0105
  f4:	82 2b       	or	r24, r18
  f6:	93 2b       	or	r25, r19
  f8:	90 93 05 01 	sts	0x0105, r25
  fc:	80 93 04 01 	sts	0x0104, r24
}
 100:	cf 91       	pop	r28
 102:	df 91       	pop	r29
 104:	08 95       	ret

00000106 <adc_driver>:

//ADC driver set up
void adc_driver(void){
 106:	df 93       	push	r29
 108:	cf 93       	push	r28
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADMUX,REFS1);
 10e:	ac e7       	ldi	r26, 0x7C	; 124
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	ec e7       	ldi	r30, 0x7C	; 124
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8f 77       	andi	r24, 0x7F	; 127
 11a:	8c 93       	st	X, r24
    SET_BIT(ADMUX,REFS0);
 11c:	ac e7       	ldi	r26, 0x7C	; 124
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	ec e7       	ldi	r30, 0x7C	; 124
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 64       	ori	r24, 0x40	; 64
 128:	8c 93       	st	X, r24
    //CH 5 as i/p
    ADMUX |= ((ONE<<MUX2)|(ONE<<MUX0));//0101
 12a:	ac e7       	ldi	r26, 0x7C	; 124
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	85 60       	ori	r24, 0x05	; 5
 136:	8c 93       	st	X, r24
    ADMUX &= ~((ONE<<MUX1)|(ONE<<MUX3));
 138:	ac e7       	ldi	r26, 0x7C	; 124
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	ec e7       	ldi	r30, 0x7C	; 124
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	85 7f       	andi	r24, 0xF5	; 245
 144:	8c 93       	st	X, r24
    CLR_BIT(ADMUX,ADLAR);
 146:	ac e7       	ldi	r26, 0x7C	; 124
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	ec e7       	ldi	r30, 0x7C	; 124
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	8f 7d       	andi	r24, 0xDF	; 223
 152:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADEN);
 154:	aa e7       	ldi	r26, 0x7A	; 122
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	ea e7       	ldi	r30, 0x7A	; 122
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	8c 93       	st	X, r24
}
 162:	cf 91       	pop	r28
 164:	df 91       	pop	r29
 166:	08 95       	ret

00000168 <LightCond>:
#include "adc.h"
#include "applicatio.h"
int duty_cycle=75;


void LightCond(){
 168:	df 93       	push	r29
 16a:	cf 93       	push	r28
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
        adc_read();
 170:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_read>
        if(FLAG_BIT.SW1==0){ //Auto Mode
 174:	80 91 06 01 	lds	r24, 0x0106
 178:	81 70       	andi	r24, 0x01	; 1
 17a:	88 23       	and	r24, r24
 17c:	09 f0       	breq	.+2      	; 0x180 <LightCond+0x18>
 17e:	5f c0       	rjmp	.+190    	; 0x23e <LightCond+0xd6>
            if(adc_result>=0 && adc_result<=50){
 180:	80 91 04 01 	lds	r24, 0x0104
 184:	90 91 05 01 	lds	r25, 0x0105
 188:	99 23       	and	r25, r25
 18a:	a4 f0       	brlt	.+40     	; 0x1b4 <LightCond+0x4c>
 18c:	80 91 04 01 	lds	r24, 0x0104
 190:	90 91 05 01 	lds	r25, 0x0105
 194:	83 33       	cpi	r24, 0x33	; 51
 196:	91 05       	cpc	r25, r1
 198:	6c f4       	brge	.+26     	; 0x1b4 <LightCond+0x4c>
                duty_cycle=191;//75% Duty Cycle
 19a:	8f eb       	ldi	r24, 0xBF	; 191
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	90 93 01 01 	sts	0x0101, r25
 1a2:	80 93 00 01 	sts	0x0100, r24
                pwm(duty_cycle);
 1a6:	80 91 00 01 	lds	r24, 0x0100
 1aa:	90 91 01 01 	lds	r25, 0x0101
 1ae:	0e 94 a5 02 	call	0x54a	; 0x54a <pwm>
 1b2:	45 c0       	rjmp	.+138    	; 0x23e <LightCond+0xd6>
            }
            else if(adc_result>=51 && adc_result<=150){
 1b4:	80 91 04 01 	lds	r24, 0x0104
 1b8:	90 91 05 01 	lds	r25, 0x0105
 1bc:	83 33       	cpi	r24, 0x33	; 51
 1be:	91 05       	cpc	r25, r1
 1c0:	a4 f0       	brlt	.+40     	; 0x1ea <LightCond+0x82>
 1c2:	80 91 04 01 	lds	r24, 0x0104
 1c6:	90 91 05 01 	lds	r25, 0x0105
 1ca:	87 39       	cpi	r24, 0x97	; 151
 1cc:	91 05       	cpc	r25, r1
 1ce:	6c f4       	brge	.+26     	; 0x1ea <LightCond+0x82>
                duty_cycle=128;//50% Duty Cycle
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	90 93 01 01 	sts	0x0101, r25
 1d8:	80 93 00 01 	sts	0x0100, r24
                pwm(duty_cycle);
 1dc:	80 91 00 01 	lds	r24, 0x0100
 1e0:	90 91 01 01 	lds	r25, 0x0101
 1e4:	0e 94 a5 02 	call	0x54a	; 0x54a <pwm>
 1e8:	2a c0       	rjmp	.+84     	; 0x23e <LightCond+0xd6>
            }
             else if(adc_result>=151 && adc_result<=250){
 1ea:	80 91 04 01 	lds	r24, 0x0104
 1ee:	90 91 05 01 	lds	r25, 0x0105
 1f2:	87 39       	cpi	r24, 0x97	; 151
 1f4:	91 05       	cpc	r25, r1
 1f6:	a4 f0       	brlt	.+40     	; 0x220 <LightCond+0xb8>
 1f8:	80 91 04 01 	lds	r24, 0x0104
 1fc:	90 91 05 01 	lds	r25, 0x0105
 200:	8b 3f       	cpi	r24, 0xFB	; 251
 202:	91 05       	cpc	r25, r1
 204:	6c f4       	brge	.+26     	; 0x220 <LightCond+0xb8>
                duty_cycle=64;//25% Duty Cycle
 206:	80 e4       	ldi	r24, 0x40	; 64
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	90 93 01 01 	sts	0x0101, r25
 20e:	80 93 00 01 	sts	0x0100, r24
                pwm(duty_cycle);
 212:	80 91 00 01 	lds	r24, 0x0100
 216:	90 91 01 01 	lds	r25, 0x0101
 21a:	0e 94 a5 02 	call	0x54a	; 0x54a <pwm>
 21e:	0f c0       	rjmp	.+30     	; 0x23e <LightCond+0xd6>
             }
            else if(adc_result>250){
 220:	80 91 04 01 	lds	r24, 0x0104
 224:	90 91 05 01 	lds	r25, 0x0105
 228:	8b 3f       	cpi	r24, 0xFB	; 251
 22a:	91 05       	cpc	r25, r1
 22c:	44 f0       	brlt	.+16     	; 0x23e <LightCond+0xd6>
                duty_cycle=0;//0% Duty Cycle
 22e:	10 92 01 01 	sts	0x0101, r1
 232:	10 92 00 01 	sts	0x0100, r1
                pwm(0);
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 a5 02 	call	0x54a	; 0x54a <pwm>
            }

        }
        if(FLAG_BIT.SW1==1){ //Manual Mode
 23e:	80 91 06 01 	lds	r24, 0x0106
 242:	81 70       	andi	r24, 0x01	; 1
 244:	88 23       	and	r24, r24
 246:	f1 f0       	breq	.+60     	; 0x284 <LightCond+0x11c>

            if(FLAG_BIT.SW2==1){// HIGH BEAM
 248:	80 91 06 01 	lds	r24, 0x0106
 24c:	82 70       	andi	r24, 0x02	; 2
 24e:	88 23       	and	r24, r24
 250:	69 f0       	breq	.+26     	; 0x26c <LightCond+0x104>
                duty_cycle=191;// 75% Duty Cycle
 252:	8f eb       	ldi	r24, 0xBF	; 191
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	90 93 01 01 	sts	0x0101, r25
 25a:	80 93 00 01 	sts	0x0100, r24
                pwm(duty_cycle);
 25e:	80 91 00 01 	lds	r24, 0x0100
 262:	90 91 01 01 	lds	r25, 0x0101
 266:	0e 94 a5 02 	call	0x54a	; 0x54a <pwm>
 26a:	0c c0       	rjmp	.+24     	; 0x284 <LightCond+0x11c>
            }
            else{//LOW BEAM OFF
                duty_cycle=128; //50% Duty Cycle
 26c:	80 e8       	ldi	r24, 0x80	; 128
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 01 01 	sts	0x0101, r25
 274:	80 93 00 01 	sts	0x0100, r24
                pwm(duty_cycle);
 278:	80 91 00 01 	lds	r24, 0x0100
 27c:	90 91 01 01 	lds	r25, 0x0101
 280:	0e 94 a5 02 	call	0x54a	; 0x54a <pwm>
            }
        }

}
 284:	cf 91       	pop	r28
 286:	df 91       	pop	r29
 288:	08 95       	ret

0000028a <diagonstic>:
void diagonstic(void)
{
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
    adc_read();
 292:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_read>
     if(FLAG_BIT.SW1==0){
 296:	80 91 06 01 	lds	r24, 0x0106
 29a:	81 70       	andi	r24, 0x01	; 1
 29c:	88 23       	and	r24, r24
 29e:	09 f0       	breq	.+2      	; 0x2a2 <diagonstic+0x18>
 2a0:	6a c0       	rjmp	.+212    	; 0x376 <diagonstic+0xec>

            if(adc_result>=0 && adc_result<=50 && duty_cycle!=191){
 2a2:	80 91 04 01 	lds	r24, 0x0104
 2a6:	90 91 05 01 	lds	r25, 0x0105
 2aa:	99 23       	and	r25, r25
 2ac:	b4 f0       	brlt	.+44     	; 0x2da <diagonstic+0x50>
 2ae:	80 91 04 01 	lds	r24, 0x0104
 2b2:	90 91 05 01 	lds	r25, 0x0105
 2b6:	83 33       	cpi	r24, 0x33	; 51
 2b8:	91 05       	cpc	r25, r1
 2ba:	7c f4       	brge	.+30     	; 0x2da <diagonstic+0x50>
 2bc:	80 91 00 01 	lds	r24, 0x0100
 2c0:	90 91 01 01 	lds	r25, 0x0101
 2c4:	8f 3b       	cpi	r24, 0xBF	; 191
 2c6:	91 05       	cpc	r25, r1
 2c8:	41 f0       	breq	.+16     	; 0x2da <diagonstic+0x50>
               SET_BIT(PORTD,PD7);//MIL ON
 2ca:	ab e2       	ldi	r26, 0x2B	; 43
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	eb e2       	ldi	r30, 0x2B	; 43
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	80 68       	ori	r24, 0x80	; 128
 2d6:	8c 93       	st	X, r24
 2d8:	4e c0       	rjmp	.+156    	; 0x376 <diagonstic+0xec>
            }
            else if(adc_result>=51 && adc_result<=150 && duty_cycle!=128 ){
 2da:	80 91 04 01 	lds	r24, 0x0104
 2de:	90 91 05 01 	lds	r25, 0x0105
 2e2:	83 33       	cpi	r24, 0x33	; 51
 2e4:	91 05       	cpc	r25, r1
 2e6:	b4 f0       	brlt	.+44     	; 0x314 <diagonstic+0x8a>
 2e8:	80 91 04 01 	lds	r24, 0x0104
 2ec:	90 91 05 01 	lds	r25, 0x0105
 2f0:	87 39       	cpi	r24, 0x97	; 151
 2f2:	91 05       	cpc	r25, r1
 2f4:	7c f4       	brge	.+30     	; 0x314 <diagonstic+0x8a>
 2f6:	80 91 00 01 	lds	r24, 0x0100
 2fa:	90 91 01 01 	lds	r25, 0x0101
 2fe:	80 38       	cpi	r24, 0x80	; 128
 300:	91 05       	cpc	r25, r1
 302:	41 f0       	breq	.+16     	; 0x314 <diagonstic+0x8a>
                SET_BIT(PORTD,PD7);//MIL ON
 304:	ab e2       	ldi	r26, 0x2B	; 43
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	eb e2       	ldi	r30, 0x2B	; 43
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	80 68       	ori	r24, 0x80	; 128
 310:	8c 93       	st	X, r24
 312:	31 c0       	rjmp	.+98     	; 0x376 <diagonstic+0xec>
            }
            else if(adc_result>=151 && adc_result<=250 && duty_cycle!=64 ){
 314:	80 91 04 01 	lds	r24, 0x0104
 318:	90 91 05 01 	lds	r25, 0x0105
 31c:	87 39       	cpi	r24, 0x97	; 151
 31e:	91 05       	cpc	r25, r1
 320:	b4 f0       	brlt	.+44     	; 0x34e <diagonstic+0xc4>
 322:	80 91 04 01 	lds	r24, 0x0104
 326:	90 91 05 01 	lds	r25, 0x0105
 32a:	8b 3f       	cpi	r24, 0xFB	; 251
 32c:	91 05       	cpc	r25, r1
 32e:	7c f4       	brge	.+30     	; 0x34e <diagonstic+0xc4>
 330:	80 91 00 01 	lds	r24, 0x0100
 334:	90 91 01 01 	lds	r25, 0x0101
 338:	80 34       	cpi	r24, 0x40	; 64
 33a:	91 05       	cpc	r25, r1
 33c:	41 f0       	breq	.+16     	; 0x34e <diagonstic+0xc4>
                SET_BIT(PORTD,PD7);//MIL ON
 33e:	ab e2       	ldi	r26, 0x2B	; 43
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	eb e2       	ldi	r30, 0x2B	; 43
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	80 68       	ori	r24, 0x80	; 128
 34a:	8c 93       	st	X, r24
 34c:	14 c0       	rjmp	.+40     	; 0x376 <diagonstic+0xec>
            }
            else if(adc_result>250 && duty_cycle!=0){
 34e:	80 91 04 01 	lds	r24, 0x0104
 352:	90 91 05 01 	lds	r25, 0x0105
 356:	8b 3f       	cpi	r24, 0xFB	; 251
 358:	91 05       	cpc	r25, r1
 35a:	6c f0       	brlt	.+26     	; 0x376 <diagonstic+0xec>
 35c:	80 91 00 01 	lds	r24, 0x0100
 360:	90 91 01 01 	lds	r25, 0x0101
 364:	00 97       	sbiw	r24, 0x00	; 0
 366:	39 f0       	breq	.+14     	; 0x376 <diagonstic+0xec>
                SET_BIT(PORTD,PD7);//MIL ON
 368:	ab e2       	ldi	r26, 0x2B	; 43
 36a:	b0 e0       	ldi	r27, 0x00	; 0
 36c:	eb e2       	ldi	r30, 0x2B	; 43
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	80 68       	ori	r24, 0x80	; 128
 374:	8c 93       	st	X, r24
            }

        }
}
 376:	cf 91       	pop	r28
 378:	df 91       	pop	r29
 37a:	08 95       	ret

0000037c <gpio_init>:
# include "gpio.h"
//GPIO pin mode setup
void gpio_init(void){
 37c:	df 93       	push	r29
 37e:	cf 93       	push	r28
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(DDRD,PD1);//Auto mode indication
 384:	aa e2       	ldi	r26, 0x2A	; 42
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	ea e2       	ldi	r30, 0x2A	; 42
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	82 60       	ori	r24, 0x02	; 2
 390:	8c 93       	st	X, r24
    CLR_BIT(DDRD,PD2);//SW1 Mode switch
 392:	aa e2       	ldi	r26, 0x2A	; 42
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	ea e2       	ldi	r30, 0x2A	; 42
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	8b 7f       	andi	r24, 0xFB	; 251
 39e:	8c 93       	st	X, r24
    SET_BIT(PORTD,PD2);//PULL UP
 3a0:	ab e2       	ldi	r26, 0x2B	; 43
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	eb e2       	ldi	r30, 0x2B	; 43
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	84 60       	ori	r24, 0x04	; 4
 3ac:	8c 93       	st	X, r24
    CLR_BIT(DDRD,PD3);//SW2 Beam Selection
 3ae:	aa e2       	ldi	r26, 0x2A	; 42
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	ea e2       	ldi	r30, 0x2A	; 42
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	87 7f       	andi	r24, 0xF7	; 247
 3ba:	8c 93       	st	X, r24
    SET_BIT(PORTD,PD3);//PULL UP
 3bc:	ab e2       	ldi	r26, 0x2B	; 43
 3be:	b0 e0       	ldi	r27, 0x00	; 0
 3c0:	eb e2       	ldi	r30, 0x2B	; 43
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	88 60       	ori	r24, 0x08	; 8
 3c8:	8c 93       	st	X, r24
    CLR_BIT(DDRC,PC5);//ADC
 3ca:	a7 e2       	ldi	r26, 0x27	; 39
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	e7 e2       	ldi	r30, 0x27	; 39
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	8f 7d       	andi	r24, 0xDF	; 223
 3d6:	8c 93       	st	X, r24
    SET_BIT(DDRD,PD6);//CRO
 3d8:	aa e2       	ldi	r26, 0x2A	; 42
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	ea e2       	ldi	r30, 0x2A	; 42
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	80 64       	ori	r24, 0x40	; 64
 3e4:	8c 93       	st	X, r24

}
 3e6:	cf 91       	pop	r28
 3e8:	df 91       	pop	r29
 3ea:	08 95       	ret

000003ec <intr_driver>:
#include "gpio.h"
#include "interupt.h"
void intr_driver(void){
 3ec:	df 93       	push	r29
 3ee:	cf 93       	push	r28
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(EICRA,ISC01);
 3f4:	a9 e6       	ldi	r26, 0x69	; 105
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	e9 e6       	ldi	r30, 0x69	; 105
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	8d 7f       	andi	r24, 0xFD	; 253
 400:	8c 93       	st	X, r24
    SET_BIT(EICRA,ISC00);
 402:	a9 e6       	ldi	r26, 0x69	; 105
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	e9 e6       	ldi	r30, 0x69	; 105
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	81 60       	ori	r24, 0x01	; 1
 40e:	8c 93       	st	X, r24
    SET_BIT(EIMSK,INT0);
 410:	ad e3       	ldi	r26, 0x3D	; 61
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	ed e3       	ldi	r30, 0x3D	; 61
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	8c 93       	st	X, r24
    CLR_BIT(EICRA,ISC01);
 41e:	a9 e6       	ldi	r26, 0x69	; 105
 420:	b0 e0       	ldi	r27, 0x00	; 0
 422:	e9 e6       	ldi	r30, 0x69	; 105
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	8d 7f       	andi	r24, 0xFD	; 253
 42a:	8c 93       	st	X, r24
    SET_BIT(EICRA,ISC10);
 42c:	a9 e6       	ldi	r26, 0x69	; 105
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	e9 e6       	ldi	r30, 0x69	; 105
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	84 60       	ori	r24, 0x04	; 4
 438:	8c 93       	st	X, r24
    SET_BIT(EIMSK,INT1);
 43a:	ad e3       	ldi	r26, 0x3D	; 61
 43c:	b0 e0       	ldi	r27, 0x00	; 0
 43e:	ed e3       	ldi	r30, 0x3D	; 61
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	82 60       	ori	r24, 0x02	; 2
 446:	8c 93       	st	X, r24
    sei();
 448:	78 94       	sei
    FLAG_BIT.SW1=0;//SW1
 44a:	80 91 06 01 	lds	r24, 0x0106
 44e:	8e 7f       	andi	r24, 0xFE	; 254
 450:	80 93 06 01 	sts	0x0106, r24
    FLAG_BIT.SW2=0;//SW2
 454:	80 91 06 01 	lds	r24, 0x0106
 458:	8d 7f       	andi	r24, 0xFD	; 253
 45a:	80 93 06 01 	sts	0x0106, r24
}
 45e:	cf 91       	pop	r28
 460:	df 91       	pop	r29
 462:	08 95       	ret

00000464 <__vector_1>:

//Mode Selection SW
ISR(INT0_vect)
{
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	8f 93       	push	r24
 470:	9f 93       	push	r25
 472:	af 93       	push	r26
 474:	bf 93       	push	r27
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
 47a:	df 93       	push	r29
 47c:	cf 93       	push	r28
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
    cli();
 482:	f8 94       	cli
    FLAG_BIT.SW1=~FLAG_BIT.SW1;
 484:	80 91 06 01 	lds	r24, 0x0106
 488:	81 70       	andi	r24, 0x01	; 1
 48a:	80 95       	com	r24
 48c:	81 70       	andi	r24, 0x01	; 1
 48e:	98 2f       	mov	r25, r24
 490:	91 70       	andi	r25, 0x01	; 1
 492:	80 91 06 01 	lds	r24, 0x0106
 496:	8e 7f       	andi	r24, 0xFE	; 254
 498:	89 2b       	or	r24, r25
 49a:	80 93 06 01 	sts	0x0106, r24

    if(FLAG_BIT.SW1==0){ //Auto Mode
 49e:	80 91 06 01 	lds	r24, 0x0106
 4a2:	81 70       	andi	r24, 0x01	; 1
 4a4:	88 23       	and	r24, r24
 4a6:	41 f4       	brne	.+16     	; 0x4b8 <__vector_1+0x54>
        SET_BIT(PORTD,PD1);
 4a8:	ab e2       	ldi	r26, 0x2B	; 43
 4aa:	b0 e0       	ldi	r27, 0x00	; 0
 4ac:	eb e2       	ldi	r30, 0x2B	; 43
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	82 60       	ori	r24, 0x02	; 2
 4b4:	8c 93       	st	X, r24
 4b6:	07 c0       	rjmp	.+14     	; 0x4c6 <__vector_1+0x62>
    }
    else{
        CLR_BIT(PORTD,PD1);
 4b8:	ab e2       	ldi	r26, 0x2B	; 43
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
 4bc:	eb e2       	ldi	r30, 0x2B	; 43
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	8d 7f       	andi	r24, 0xFD	; 253
 4c4:	8c 93       	st	X, r24
    }

    sei();
 4c6:	78 94       	sei
}
 4c8:	cf 91       	pop	r28
 4ca:	df 91       	pop	r29
 4cc:	ff 91       	pop	r31
 4ce:	ef 91       	pop	r30
 4d0:	bf 91       	pop	r27
 4d2:	af 91       	pop	r26
 4d4:	9f 91       	pop	r25
 4d6:	8f 91       	pop	r24
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <__vector_2>:

//Beam Selection SW
ISR(INT1_vect)
{
 4e2:	1f 92       	push	r1
 4e4:	0f 92       	push	r0
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	0f 92       	push	r0
 4ea:	11 24       	eor	r1, r1
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
 4f0:	df 93       	push	r29
 4f2:	cf 93       	push	r28
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
    cli();
 4f8:	f8 94       	cli
    FLAG_BIT.SW2=~FLAG_BIT.SW2;
 4fa:	80 91 06 01 	lds	r24, 0x0106
 4fe:	86 95       	lsr	r24
 500:	81 70       	andi	r24, 0x01	; 1
 502:	80 95       	com	r24
 504:	81 70       	andi	r24, 0x01	; 1
 506:	81 70       	andi	r24, 0x01	; 1
 508:	98 2f       	mov	r25, r24
 50a:	99 0f       	add	r25, r25
 50c:	80 91 06 01 	lds	r24, 0x0106
 510:	8d 7f       	andi	r24, 0xFD	; 253
 512:	89 2b       	or	r24, r25
 514:	80 93 06 01 	sts	0x0106, r24
    sei();
 518:	78 94       	sei
}
 51a:	cf 91       	pop	r28
 51c:	df 91       	pop	r29
 51e:	9f 91       	pop	r25
 520:	8f 91       	pop	r24
 522:	0f 90       	pop	r0
 524:	0f be       	out	0x3f, r0	; 63
 526:	0f 90       	pop	r0
 528:	1f 90       	pop	r1
 52a:	18 95       	reti

0000052c <main>:
#include "gpio.h"
#include "adc.h"

int main(void)
{
 52c:	df 93       	push	r29
 52e:	cf 93       	push	r28
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
    gpio_init();
 534:	0e 94 be 01 	call	0x37c	; 0x37c <gpio_init>
    intr_driver();
 538:	0e 94 f6 01 	call	0x3ec	; 0x3ec <intr_driver>
    adc_driver();
 53c:	0e 94 83 00 	call	0x106	; 0x106 <adc_driver>
    timer_driver();
 540:	0e 94 c3 02 	call	0x586	; 0x586 <timer_driver>
    while(1){
      LightCond();
 544:	0e 94 b4 00 	call	0x168	; 0x168 <LightCond>
 548:	fd cf       	rjmp	.-6      	; 0x544 <main+0x18>

0000054a <pwm>:
#include "pwm.h"

void pwm(int DutyCycle){
 54a:	df 93       	push	r29
 54c:	cf 93       	push	r28
 54e:	00 d0       	rcall	.+0      	; 0x550 <pwm+0x6>
 550:	cd b7       	in	r28, 0x3d	; 61
 552:	de b7       	in	r29, 0x3e	; 62
 554:	9a 83       	std	Y+2, r25	; 0x02
 556:	89 83       	std	Y+1, r24	; 0x01
    TCCR0A |=(1<<COM0A1)|(1<<WGM01)|(1<<WGM00);
 558:	a4 e4       	ldi	r26, 0x44	; 68
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	e4 e4       	ldi	r30, 0x44	; 68
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	83 68       	ori	r24, 0x83	; 131
 564:	8c 93       	st	X, r24
    OCR0A=DutyCycle;
 566:	e7 e4       	ldi	r30, 0x47	; 71
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	80 83       	st	Z, r24
    TCCR0B|=(1<<CS00);
 56e:	a5 e4       	ldi	r26, 0x45	; 69
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	e5 e4       	ldi	r30, 0x45	; 69
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	81 60       	ori	r24, 0x01	; 1
 57a:	8c 93       	st	X, r24
}
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	cf 91       	pop	r28
 582:	df 91       	pop	r29
 584:	08 95       	ret

00000586 <timer_driver>:
#include "timer.h"
#include "gpio.h"


void timer_driver(void)
{
 586:	df 93       	push	r29
 588:	cf 93       	push	r28
 58a:	cd b7       	in	r28, 0x3d	; 61
 58c:	de b7       	in	r29, 0x3e	; 62
    TCCR0A=0x00;
 58e:	e4 e4       	ldi	r30, 0x44	; 68
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	10 82       	st	Z, r1
    TCNT0=0x00;
 594:	e6 e4       	ldi	r30, 0x46	; 70
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	10 82       	st	Z, r1
    TCCR0B |=((1<<CS00)|(1<<CS02));
 59a:	a5 e4       	ldi	r26, 0x45	; 69
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	e5 e4       	ldi	r30, 0x45	; 69
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	85 60       	ori	r24, 0x05	; 5
 5a6:	8c 93       	st	X, r24
    TCCR0B &=~(1<<CS01);
 5a8:	a5 e4       	ldi	r26, 0x45	; 69
 5aa:	b0 e0       	ldi	r27, 0x00	; 0
 5ac:	e5 e4       	ldi	r30, 0x45	; 69
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	8d 7f       	andi	r24, 0xFD	; 253
 5b4:	8c 93       	st	X, r24
    TIMSK0 |=(1<<TOIE0);
 5b6:	ae e6       	ldi	r26, 0x6E	; 110
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	ee e6       	ldi	r30, 0x6E	; 110
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	81 60       	ori	r24, 0x01	; 1
 5c2:	8c 93       	st	X, r24

    sei();
 5c4:	78 94       	sei
    SET_BIT(DDRD,PD7);
 5c6:	aa e2       	ldi	r26, 0x2A	; 42
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	ea e2       	ldi	r30, 0x2A	; 42
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	80 68       	ori	r24, 0x80	; 128
 5d2:	8c 93       	st	X, r24
    CLR_BIT(PORTD,PD7);
 5d4:	ab e2       	ldi	r26, 0x2B	; 43
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	eb e2       	ldi	r30, 0x2B	; 43
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	8f 77       	andi	r24, 0x7F	; 127
 5e0:	8c 93       	st	X, r24
}
 5e2:	cf 91       	pop	r28
 5e4:	df 91       	pop	r29
 5e6:	08 95       	ret

000005e8 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	2f 93       	push	r18
 5f4:	3f 93       	push	r19
 5f6:	4f 93       	push	r20
 5f8:	5f 93       	push	r21
 5fa:	6f 93       	push	r22
 5fc:	7f 93       	push	r23
 5fe:	8f 93       	push	r24
 600:	9f 93       	push	r25
 602:	af 93       	push	r26
 604:	bf 93       	push	r27
 606:	ef 93       	push	r30
 608:	ff 93       	push	r31
 60a:	df 93       	push	r29
 60c:	cf 93       	push	r28
 60e:	cd b7       	in	r28, 0x3d	; 61
 610:	de b7       	in	r29, 0x3e	; 62
    counter++;
 612:	80 91 02 01 	lds	r24, 0x0102
 616:	90 91 03 01 	lds	r25, 0x0103
 61a:	01 96       	adiw	r24, 0x01	; 1
 61c:	90 93 03 01 	sts	0x0103, r25
 620:	80 93 02 01 	sts	0x0102, r24
    if(counter >=305)
 624:	80 91 02 01 	lds	r24, 0x0102
 628:	90 91 03 01 	lds	r25, 0x0103
 62c:	21 e0       	ldi	r18, 0x01	; 1
 62e:	81 33       	cpi	r24, 0x31	; 49
 630:	92 07       	cpc	r25, r18
 632:	10 f0       	brcs	.+4      	; 0x638 <__vector_16+0x50>
    {
        diagonstic();
 634:	0e 94 45 01 	call	0x28a	; 0x28a <diagonstic>
    }

}
 638:	cf 91       	pop	r28
 63a:	df 91       	pop	r29
 63c:	ff 91       	pop	r31
 63e:	ef 91       	pop	r30
 640:	bf 91       	pop	r27
 642:	af 91       	pop	r26
 644:	9f 91       	pop	r25
 646:	8f 91       	pop	r24
 648:	7f 91       	pop	r23
 64a:	6f 91       	pop	r22
 64c:	5f 91       	pop	r21
 64e:	4f 91       	pop	r20
 650:	3f 91       	pop	r19
 652:	2f 91       	pop	r18
 654:	0f 90       	pop	r0
 656:	0f be       	out	0x3f, r0	; 63
 658:	0f 90       	pop	r0
 65a:	1f 90       	pop	r1
 65c:	18 95       	reti

0000065e <_exit>:
 65e:	f8 94       	cli

00000660 <__stop_program>:
 660:	ff cf       	rjmp	.-2      	; 0x660 <__stop_program>
